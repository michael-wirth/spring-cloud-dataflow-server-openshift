server:
  port: 9393

info:
  app:
    name: "@project.artifactId@"
    description: "@project.description@"
    version: "@project.version@"

spring:
  application:
    name: spring-cloud-dataflow-server-openshift
  cloud:
    config:
      uri: http://localhost:8888
    dataflow:
      features:
        schedules-enabled: true
        streams-enabled: true
      task:
        platform:
          openshift:
            accounts:
              default:
                namespace: scdf
                createJob: true
                environmentVariables:
                  - 'SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=${KAFKA_BROKER_SERVICE_HOST}:${KAFKA_BROKER_SERVICE_PORT}'
                  - 'SPRING_REDIS_HOST=${REDIS_SERVICE_HOST}'
                  - 'SPRING_REDIS_PORT=${REDIS_SERVICE_PORT}'
                  - 'SPRING_CLOUD_CONFIG_ENABLED=false'
                  - 'SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration'
                  - 'MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always'
                  - 'JAVA_OPTIONS=-Duser.timezone=Europe/Zurich'
                  - 'TZ=Europe/Zurich'
    skipper:
      client:
        serverUri: http://localhost:7577
      server:
        enableLocalPlatform: false

management:
  endpoints:
    web:
      exposure:
        include: '*'
      base-path: /actuator
  endpoint:
    health:
      show-details: always

maven:
  remote-repositories:
    spring:
      url: https://repo.spring.io/libs-snapshot

kubernetes:
  service:
    host: true
---
# Configuration options when using Kafka binder:
#spring:
#  cloud:
#    deployer:
#      kubernetes:
#        createLoadBalancer: false
#        environmentVariables: 'SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=${KAFKA_SERVICE_HOST}:${KAFKA_SERVICE_PORT},SPRING_CLOUD_STREAM_KAFKA_BINDER_ZK_NODES=${ZK_SERVICE_HOST}:${ZK_SERVICE_PORT}'

# Configuration options when using RabbitMQ binder:
#spring:
#  cloud:
#    deployer:
#      kubernetes:
#        createLoadBalancer: false
#        environmentVariables: 'SPRING_RABBITMQ_HOST=${RABBITMQ_SERVICE_HOST},SPRING_RABBITMQ_PORT=${RABBITMQ_SERVICE_PORT}'


# If you prefer to use Eureka to locate the Config Server, you can do that by setting
# spring.cloud.config.discovery.enabled=true (default "false"). The net result of that is
# that client apps all need a bootstrap.yml (or an environment variable) with the Eureka
# server address, e.g. in eureka.client.serviceUrl.defaultZone
#---
#spring:
#  cloud:
#     config:
#        discovery:
#           enabled: true
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://localhost:8761/eureka/
